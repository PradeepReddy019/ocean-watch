name: Deploy with AWS Copilot

on:
  workflow_dispatch:  # Trigger on pushes to the main branch; adjust as needed

jobs:
  setup-copilot:
    runs-on: ubuntu-latest
    outputs:
      copilot-path: ${{ steps.setup.outputs.copilot-path }}
    steps:
      - name: Create a temporary directory for downloading
        id: setup
        run: |
          mkdir -p ${{ runner.temp }}/copilot-download
          echo "copilot-path=${{ runner.temp }}/copilot-download/copilot" >> $GITHUB_OUTPUT
      - name: Download Copilot CLI
        run: |
          curl -Lo ${{ steps.setup.outputs.copilot-path }} https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
      - name: Make binary executable
        run: chmod +x ${{ steps.setup.outputs.copilot-path }}
      - name: Upload Copilot CLI to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: copilot-cli
          path: ${{ steps.setup.outputs.copilot-path }}

  deploy:
    runs-on: ubuntu-latest
    needs: setup-copilot
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download Copilot CLI from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: copilot-cli
          path: /usr/local/bin

      - name: Ensure Copilot is executable
        run: chmod +x /usr/local/bin/copilot

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub_Action_Role
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull origin ${{ github.head_ref }} 

      # Step 4: Run Copilot commands
      - name: Initialize Application and Environment
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Initialize the application (creates necessary infrastructure)
          copilot app init ocean-watch || echo "Application already exists"

          # Initialize the environment with default settings
          copilot env init --name test-env --app ocean-watch --region $AWS_REGION --default-config

      - name: Deploy Environment
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Deploy the environment to provision necessary resources
          copilot env deploy --name test-env

      - name: Initialize and Deploy Service
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Initialize a new service within the app
          copilot init --app ocean-watch --svc ocean-service --type "Load Balanced Web Service" --deploy

          # Deploy the service to the environment
          copilot svc deploy --name ocean-service --env test-env

          # Check the service status
          copilot svc status --name ocean-service --env test-env

      - name: Commit AWS Copilot Staging Config
        if: env.environment_exists == 'false'
        run: |
          git config --global user.email "pradeep.reddy@ryvalx.com"
          git config --global user.name "PradeepReddy019"
          git add -A  # Adds all changes, including untracked files
          git diff-index --quiet HEAD || git commit -m "AWS copilot configs generated by GitHub Actions Bot"
          git push origin HEAD:${{ github.ref }}  # Ensure you're pushing to the correct branch
        shell: bash
