name: Manual Boostrap of AWS Copilot Project

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Feature Branch Name'
        required: true

jobs:
  branch-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check if on main branch
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/dev' ]]; then
            echo "This workflow cannot be run on the main branch."
            exit 1
          fi

  setup-copilot:
    needs: branch-check
    runs-on: ubuntu-latest
    outputs:
      copilot-path: ${{ steps.setup.outputs.copilot-path }}
    steps:
      - name: Create a temporary directory for downloading
        id: setup
        run: |
          mkdir -p ${{ runner.temp }}/copilot-download
          echo "copilot-path=${{ runner.temp }}/copilot-download/copilot" >> $GITHUB_OUTPUT
      - name: Download Copilot CLI
        run: |
          curl -Lo ${{ steps.setup.outputs.copilot-path }} https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
      - name: Make binary executable
        run: chmod +x ${{ steps.setup.outputs.copilot-path }}
      - name: Upload Copilot CLI to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: copilot-cli
          path: ${{ steps.setup.outputs.copilot-path }}

  init-copilot:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: setup-copilot
    steps:
      - name: Download Copilot CLI from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: copilot-cli
          path: /usr/local/bin

      - name: Ensure Copilot is executable
        run: chmod +x /usr/local/bin/copilot

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub_Action_Role
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull origin ${{ github.head_ref }}  # Pull latest changes to ensure the local copy is up-to-date

      - name: Check for existing Copilot application
        id: check_app
        run: |
          if copilot app ls | grep -qw "ocean-watch"; then
            echo "App exists."
            echo "app_exists=true" >> $GITHUB_ENV
          else
            echo "App does not exist."
            echo "app_exists=false" >> $GITHUB_ENV
          fi

      - name: Initialize Copilot application
        if: env.app_exists == 'false'
        run: copilot app init ocean-watch --resource-tags program=Oceans,project=OceanWatch,application=OceanWatch

      - name: Commit AWS Copilot Staging Config
        if: env.environment_exists == 'false'
        run: |
          git config --global user.email "pradeep.reddy@ryvalx.com"
          git config --global user.name "PradeepReddy019"
          git add -A  # Adds all changes, including untracked files
          if ! git diff --exit-code; then
            git commit -m "AWS Copilot config files (manifest.yml) generated by GitHub Actions Bot"
          else
            echo "No changes to commit."
          fi
          git push origin HEAD:${{ github.ref }}  # Ensure you're pushing to the correct branch
        shell: bash


  create-copilot-staging-environment:
    needs: [ init-copilot ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Copilot CLI from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: copilot-cli
          path: /usr/local/bin

      - name: Ensure Copilot is executable
        run: chmod +x /usr/local/bin/copilot

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub_Action_Role
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull origin ${{ github.head_ref }}  # Pull latest changes to ensure the local copy is up-to-date

      - name: Check for existing Copilot Environment
        id: check_environment
        run: |
          if copilot env show --name ${{ github.event.inputs.branch_name }} --json > /dev/null 2>&1; then
            echo "Environment exists."
            echo "environment_exists=true" >> $GITHUB_ENV
          else
            echo "Environment does not exist."
            echo "environment_exists=false" >> $GITHUB_ENV
          fi

      - name: Initialize Staging Environment
        id: init-environment
        if: env.environment_exists == 'false'
        run: |
          echo "Initializing environment ${{ github.event.inputs.branch_name }}..."
          if ! copilot env init --name ${{ github.event.inputs.branch_name }} --app ocean-watch --default-config --region ${{ secrets.AWS_REGION }}; then
            echo "Failed to initialize environment."
          exit 1
          fi

      - name: Initialize Copilot Application (if not already initialized)
        run: |
          if [ ! -d "copilot" ]; then
            echo "Copilot workspace not found! Initializing Copilot application..."
            copilot app init --name ocean-watch
          else
            echo "Copilot workspace exists."
          fi

      - name: Initialize Service in Copilot (if not already initialized)
        run: |
          if ! copilot svc show --name ocean-watch > /dev/null 2>&1; then
            echo "Service ocean-watch does not exist. Initializing..."
            copilot svc init --name ocean-watch --svc-type "Load Balanced Web Service" --dockerfile ./Dockerfile
          else
            echo "Service ocean-watch already exists."
          fi

      - name: Deploy environment to staging
        run: |
          echo "Deploying environment ${{ github.event.inputs.branch_name }} to staging..."
          copilot env deploy --name ${{ github.event.inputs.branch_name }} --force

      - name: Deploy service to staging
        run: |
          echo "Deploying service ocean-watch to staging..."
          copilot svc deploy --name ocean-watch --env ${{ github.event.inputs.branch_name }} --force



      - name: Commit AWS Copilot Staging Config
        if: env.environment_exists == 'false'
        run: |
          git config --global user.email "pradeep.reddy@ryvalx.com"
          git config --global user.name "PradeepReddy019"
          git add -A  # Adds all changes, including untracked files
          git diff-index --quiet HEAD || git commit -m "AWS copilot configs generated by GitHub Actions Bot"
          git push origin HEAD:${{ github.ref }}  # Ensure you're pushing to the correct branch
        shell: bash

  # create-copilot-production-environment:
  #   needs: [ create-copilot-staging-environment ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Copilot CLI from Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: copilot-cli
  #         path: /usr/local/bin

  #     - name: Ensure Copilot is executable
  #       run: chmod +x /usr/local/bin/copilot

  #     - name: Configure AWS Credentials using OIDC
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub_Action_Role
  #         aws-region: us-east-1
  #         role-duration-seconds: 1800
  #         output-credentials: true

  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Pull latest changes
  #       run: git pull origin ${{ github.head_ref }}  # Pull latest changes to ensure the local copy is up-to-date

  #     - name: Check for existing Copilot Production Environment
  #       id: check_environment
  #       run: |
  #         if copilot env show --name production --json; then
  #           echo "Environment exists."
  #           echo "environment_exists=true" >> $GITHUB_ENV
  #         else
  #           echo "Environment does not exist."
  #           echo "environment_exists=false" >> $GITHUB_ENV
  #         fi

  #     - name: Initialize Production Environment
  #       id: init-environment
  #       if: env.environment_exists == 'false'
  #       run: |
  #         if ! copilot env init --name production --app ocean-watch --default-config --region ${{ secrets.AWS_REGION }} --aws-session-token ${{ steps.creds.outputs.aws-session-token }}; then
  #           echo "Failed to initialize environment."
  #           exit 1
  #         fi

  #     - name: Commit AWS Copilot Production Config
  #       if: env.environment_exists == 'false'
  #       run: |
  #         git config --global user.email "action@github.com"
  #         git config --global user.name "GitHub Action"
  #         git add -A  # Adds all changes, including untracked files
  #         git diff-index --quiet HEAD || git commit -m "AWS copilot configs generated by GitHub Actions Bot"
  #         git push origin HEAD:${{ github.ref }}  # Ensure you're pushing to the correct branch
  #       shell: bash